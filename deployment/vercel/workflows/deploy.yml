name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - production
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - admin
          - fabric-store
          - store-guide
      environment:
        description: 'Environment'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_ADMIN: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}
  VERCEL_PROJECT_ID_FABRIC_STORE: ${{ secrets.VERCEL_PROJECT_ID_FABRIC_STORE }}
  VERCEL_PROJECT_ID_STORE_GUIDE: ${{ secrets.VERCEL_PROJECT_ID_STORE_GUIDE }}

jobs:
  deploy-admin:
    name: Deploy Admin App
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'admin') ||
      github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Build Admin App
        run: npm run build:admin

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.event.inputs.environment || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.ref }}" == "refs/heads/production" ]; then
            vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          fi

  deploy-fabric-store:
    name: Deploy Fabric Store
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'fabric-store') ||
      github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Fabric Store
        run: |
          cd experiences/fabric-store
          npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy Fabric Store to Vercel
        run: |
          cd experiences/fabric-store
          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.ref }}" == "refs/heads/production" ]; then
            vercel --prod --yes --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FABRIC_STORE }}

  deploy-store-guide:
    name: Deploy Store Guide
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' && 
      (github.event.inputs.deploy_target == 'all' || github.event.inputs.deploy_target == 'store-guide') ||
      github.event_name != 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Store Guide
        run: |
          cd experiences/store-guide
          npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy Store Guide to Vercel
        run: |
          cd experiences/store-guide
          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.ref }}" == "refs/heads/production" ]; then
            vercel --prod --yes --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_STORE_GUIDE }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-admin, deploy-fabric-store, deploy-store-guide]
    if: always()
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary"
          echo "- Admin App: ${{ needs.deploy-admin.result }}"
          echo "- Fabric Store: ${{ needs.deploy-fabric-store.result }}"
          echo "- Store Guide: ${{ needs.deploy-store-guide.result }}"
          
          if [ "${{ needs.deploy-admin.result }}" == "success" ] && 
             [ "${{ needs.deploy-fabric-store.result }}" == "success" ] && 
             [ "${{ needs.deploy-store-guide.result }}" == "success" ]; then
            echo "✅ All deployments successful!"
          else
            echo "⚠️ Some deployments may have failed. Check individual job logs."
            exit 1
          fi