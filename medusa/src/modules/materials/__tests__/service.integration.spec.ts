import { moduleIntegrationTestRunner } from "@medusajs/test-utils"
import type MaterialsService from "../service"
import Material from "../models"

moduleIntegrationTestRunner<MaterialsService>({
  moduleName: "materialsModuleService",
  moduleModels: [Material],
  resolve: "../",
  testSuite: ({ service }) => {
    const truncate = async () => {
      const all = await service.listMaterials({})
      for (const m of all as Array<{ id: string }>) {
        // @ts-ignore generated by MedusaService
        await service.deleteMaterial(m.id)
      }
    }

    describe("Materials Service Integration", () => {
      beforeEach(async () => {
        await truncate()
      })

      test("createMaterials inserts and returns the record", async () => {
        const created = await service.createMaterials({
          name: "Test Material A",
          properties: { origin: "FR", gsm: 200 },
        })

        expect(created).toBeDefined()
        expect(created.id).toMatch(/^mat_/)
        expect(created.name).toBe("Test Material A")

        // Verify via listing by id (DB-backed)
        const found = await service.listMaterials({ filters: { id: created.id } as any })
        expect(found.length).toBe(1)
        expect(found[0].name).toBe("Test Material A")
        expect((found[0] as any).properties?.gsm).toBe(200)
      })

      test("listMaterials returns all and filters by name", async () => {
        await service.createMaterials({ name: "Test Material 1" })
        await service.createMaterials({ name: "Test Material 2" })
        await service.createMaterials({ name: "Another Material" })

        const all = await service.listMaterials({})
        const names = all.map((m) => m.name)
        expect(names).toEqual(expect.arrayContaining(["Test Material 1", "Test Material 2", "Another Material"]))

        const filtered = await service.listMaterials({ filters: { name: "Test Material 1" } as any })
        expect(filtered).toHaveLength(1)
        expect(filtered[0].name).toBe("Test Material 1")
      })

      test("retrieveMaterial returns the correct record and handles missing id", async () => {
        const created = await service.createMaterials({ name: "Retrievable Material" })
        const fetched = await service.retrieveMaterial(created.id)
        expect(fetched.id).toBe(created.id)
        expect(fetched.name).toBe("Retrievable Material")

        await expect(service.retrieveMaterial("mat_nonexistent"))
          .rejects.toThrow(/not found/i)
      })

      test("count returns the total number of materials", async () => {
        await service.createMaterials({ name: "Count A" })
        await service.createMaterials({ name: "Count B" })
        await service.createMaterials({ name: "Count C" })
        await service.createMaterials({ name: "Count D" })
        await service.createMaterials({ name: "Count E" })

        const c = await service.count()
        expect(c).toBeGreaterThanOrEqual(5)
      })
    })
  },
})
