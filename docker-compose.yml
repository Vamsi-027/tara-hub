# Docker Compose for Tara Hub Raw Materials Development
# Session 1: Docker Environment Setup
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tara-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-medusa}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medusa}
      POSTGRES_DB: ${POSTGRES_DB:-medusa}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - tara-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tara-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - tara-network
    restart: unless-stopped

  # Medusa Backend Service
  medusa:
    build:
      context: ./medusa
      dockerfile: Dockerfile.dev
    container_name: tara-medusa
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-medusa}:${POSTGRES_PASSWORD:-medusa}@postgres:5432/${POSTGRES_DB:-medusa}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      COOKIE_SECRET: ${COOKIE_SECRET:-supersecret}
      STORE_CORS: ${STORE_CORS:-http://localhost:3000,http://localhost:3006,http://localhost:3007}
      ADMIN_CORS: ${ADMIN_CORS:-http://localhost:3000,http://localhost:9000}
      AUTH_CORS: ${AUTH_CORS:-http://localhost:3000,http://localhost:9000}
      MEDUSA_BACKEND_URL: ${MEDUSA_BACKEND_URL:-http://localhost:9000}
      # Email
      RESEND_API_KEY: ${RESEND_API_KEY}
      RESEND_FROM_EMAIL: ${RESEND_FROM_EMAIL:-admin@tara-hub.com}
      # Storage
      S3_REGION: ${S3_REGION:-auto}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-store}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_PUBLIC_URL: ${S3_PUBLIC_URL}
      # Payment
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
    ports:
      - "9000:9000"
    volumes:
      - ./medusa:/app
      - medusa_uploads:/app/uploads
      - medusa_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tara-network
    restart: unless-stopped
    command: npm run dev

  # Admin Dashboard
  admin:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: tara-admin
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-medusa}:${POSTGRES_PASSWORD:-medusa}@postgres:5432/${POSTGRES_DB:-medusa}
      MEDUSA_BACKEND_URL: http://medusa:9000
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: ${NEXT_PUBLIC_MEDUSA_BACKEND_URL:-http://localhost:9000}
      JWT_SECRET: ${JWT_SECRET:-supersecret}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-supersecret}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      KV_REST_API_URL: ${KV_REST_API_URL}
      KV_REST_API_TOKEN: ${KV_REST_API_TOKEN}
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      medusa:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - tara-network
    restart: unless-stopped
    command: npm run dev

  # PgAdmin (optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tara-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@tara-hub.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tara-network
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander (optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: tara-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - tara-network
    restart: unless-stopped
    profiles:
      - tools

networks:
  tara-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  medusa_uploads:
    driver: local
  medusa_node_modules:
    driver: local
  pgadmin_data:
    driver: local